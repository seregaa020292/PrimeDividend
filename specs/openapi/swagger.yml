openapi: "3.0.0"

info:
  version: 1.0.1
  title: "PrimeDividend"
  description: "API для приложения PrimeDividend"
externalDocs:
  description: "Спецификация Swagger"
  url: https://swagger.io/specification

servers:
  - url: http://localhost/api
    description: "Local server"

#security:
#  - BearerAuth: [ ]

tags:
  - name: auth
    description: "Аутентификация, авторизация, идентификация"
  - name: user
    description: "Инвестор"
  - name: currency
    description: "Валюта"
  - name: provider
    description: "Поставщики котировок"
  - name: instrument
    description: "Ценные инструменты, по классификации"
  - name: market
    description: "Список ценных бумаг"
  - name: register
    description: "Связь с поставщиком котировок и ценной бумагой"
  - name: portfolio
    description: "Портфель инвестора"
  - name: asset
    description: "Активы инвестора"

paths:
  /auth/email:
    post:
      tags: [ auth ]
      operationId: authEmail
      summary: Аутентификация по Email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/authUser"
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
  /auth/email/confirm:
    post:
      tags: [ auth ]
      operationId: authEmailConfirm
      summary: Авторизация по Email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/authConfirm"
      responses:
        200:
          $ref: '#/components/responses/200'
        500:
          $ref: '#/components/responses/500'
  /auth/{network}:
    get:
      tags: [ auth ]
      operationId: authNetwork
      summary: Аутентификация в соц. сетях
      parameters:
        - $ref: "#/components/parameters/network"
      responses:
        301:
          $ref: '#/components/responses/301'
        500:
          $ref: '#/components/responses/500'
  /auth/{network}/callback:
    get:
      tags: [ auth ]
      operationId: authNetworkCallback
      summary: Авторизация в соц. сетях
      parameters:
        - $ref: "#/components/parameters/network"
      responses:
        301:
          $ref: '#/components/responses/301'
        500:
          $ref: '#/components/responses/500'

  /portfolio/{portfolioId}:
    get:
      tags: [ portfolio ]
      operationId: getPortfolioById
      summary: Получение портфеля по ID
      parameters:
        - $ref: "#/components/parameters/portfolioId"
      responses:
        200:
          description: todo
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/portfolio'
        500:
          $ref: '#/components/responses/500'

  /portfolio:
    post:
      tags: [ portfolio ]
      operationId: createPortfolio
      summary: Создание портфеля
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/portfolioUpdate"
      responses:
        204:
          $ref: '#/components/responses/204'
        500:
          $ref: '#/components/responses/500'

  /instrument:
    get:
      tags: [ instrument ]
      operationId: getInstruments
      responses:
        200:
          description: Все инструменты
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/instruments'
        500:
          $ref: '#/components/responses/500'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    portfolioId:
      in: path
      name: portfolioId
      schema:
        type: string
        format: uuid
      required: true
    network:
      in: path
      name: network
      schema:
        type: string
      required: true

  responses:
    101:
      description: Switching Protocols
    200:
      description: OK
    201:
      description: Created
    202:
      description: Accepted
    204:
      description: No Content
    301:
      description: Moved Permanently
    400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    422:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    500:
      description: Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'

  schemas:
    authUser:
      type: object
      required: [ email, password ]
      properties:
        email:
          type: string
          format: example@example.ru
          x-oapi-codegen-extra-tags:
            validate: required,email
        password:
          type: string
          x-oapi-codegen-extra-tags:
            validate: required,min=6
    authConfirm:
      type: object
      required: [ token ]
      properties:
        token:
          type: string
          format: uuid
          x-oapi-codegen-extra-tags:
            validate: required
    portfolio:
      type: object
      required: [ id, createdAt ]
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
    portfolioUpdate:
      type: object
      required: [ title, userId, currencyId ]
      properties:
        title:
          type: string
          x-oapi-codegen-extra-tags:
            validate: required
        userId:
          type: string
          format: uuid
          x-oapi-codegen-extra-tags:
            validate: required,uuid
        currencyId:
          type: string
          format: uuid
          x-oapi-codegen-extra-tags:
            validate: required,uuid

    instruments:
      type: array
      items:
        $ref: '#/components/schemas/instrument'

    instrument:
      type: object
      required: [ id, title, description, createdAt, updatedAt ]
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string

    meta:
      type: object
      description: Метаданные
      properties:
        pagination:
          type: object
          description: Данные пагинации
          properties:
            page:
              type: integer
              description: Текущая страница
              minimum: 1
            pageSize:
              type: integer
              description: Кол-во элементов на странице
              minimum: 1
            pageCount:
              type: integer
              description: Общее кол-во страниц
              minimum: 0
            total:
              type: integer
              description: Всего элементов
              minimum: 1
    error:
      type: object
      required: [ errors ]
      properties:
        data:
          nullable: true
          default: null
        error:
          type: object
          required: [ status, target, message ]
          description: Объект ошибки
          properties:
            status:
              type: number
              description: HTTP код ошибки
            target:
              type: number
              description: Место где произошла ошибка
            message:
              type: string
              description: Описание ошибки
            details:
              type: array
              description: В каком поле произошла ошибка
              items:
                type: object
                required: [ message ]
                properties:
                  message:
                    type: string
                    description: Описание ошибки
                  target:
                    type: string
                    description: Поле в котором произошла ошибка
