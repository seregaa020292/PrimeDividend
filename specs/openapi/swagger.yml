openapi: "3.0.0"

info:
  version: 1.0.1
  title: "PrimeDividend"
  description: "API для приложения PrimeDividend"
externalDocs:
  description: "Спецификация Swagger"
  url: https://swagger.io/specification

servers:
  - url: http://localhost/api
    description: "Local server"

tags:
  - name: auth
    description: "Аутентификация и авторизация"
  - name: user
    description: "Инвестор"
  - name: currency
    description: "Валюта"
  - name: provider
    description: "Поставщики котировок"
  - name: instrument
    description: "Ценные инструменты, по классификации"
  - name: market
    description: "Список ценных бумаг"
  - name: register
    description: "Связь с поставщиком котировок и ценной бумагой"
  - name: portfolio
    description: "Портфель инвестора"
  - name: asset
    description: "Активы инвестора"

paths:
  /auth/email:
    post:
      tags: [ auth ]
      operationId: joinEmail
      summary: Создание пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authUser'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
  /auth/email/confirm:
    post:
      tags: [ auth ]
      operationId: confirmEmail
      summary: Подтверждение почты
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authConfirm'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
  /auth/email/login:
    post:
      tags: [ auth ]
      operationId: loginEmail
      summary: Аутентификация по Email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginUser'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/authToken'
        400:
          $ref: '#/components/responses/400'
  /auth/{network}:
    get:
      tags: [ auth ]
      operationId: joinNetwork
      summary: Аутентификация через соц. сети
      parameters:
        - $ref: '#/components/parameters/network'
      responses:
        301:
          $ref: '#/components/responses/301'
        400:
          $ref: '#/components/responses/400'
  /auth/{network}/callback:
    get:
      tags: [ auth ]
      operationId: confirmNetwork
      summary: Авторизация через соц. сети
      parameters:
        - $ref: '#/components/parameters/network'
        - $ref: '#/components/parameters/code'
        - $ref: '#/components/parameters/state'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/authToken'
        400:
          $ref: '#/components/responses/400'
  /auth/refresh-token:
    post:
      tags: [ auth ]
      operationId: refreshToken
      summary: Обновить токены
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/authToken'
        403:
          $ref: '#/components/responses/403'
  /auth/logout:
    post:
      tags: [ auth ]
      operationId: logout
      summary: Выход из аккаунта
      responses:
        200:
          $ref: '#/components/responses/200'
        403:
          $ref: '#/components/responses/403'

  /portfolio/{portfolioId}:
    get:
      tags: [ portfolio ]
      operationId: getPortfolio
      summary: Получение портфеля по ID
      parameters:
        - $ref: '#/components/parameters/portfolioId'
      responses:
        200:
          description: todo
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/portfolio'
        400:
          $ref: '#/components/responses/400'

    patch:
      tags: [ portfolio ]
      operationId: updatePortfolio
      summary: Редактирование портфеля
      parameters:
        - $ref: '#/components/parameters/portfolioId'
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/portfolioUpdate'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
    delete:
      tags: [ portfolio ]
      operationId: removePortfolio
      summary: Удаление портфеля
      parameters:
        - $ref: '#/components/parameters/portfolioId'
      security:
        - BearerAuth: [ ]
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'

  /portfolio:
    get:
      tags: [ portfolio ]
      operationId: getPortfolios
      summary: Получение списка портфелей
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/cursor'
      responses:
        200:
          description: Список портфелей
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/portfolios'
                  meta:
                    $ref: '#/components/schemas/meta'
        400:
          $ref: '#/components/responses/400'
    post:
      tags: [ portfolio ]
      operationId: createPortfolio
      summary: Создание портфеля
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/portfolioAdd'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'

  /instrument:
    get:
      tags: [ instrument ]
      operationId: getInstruments
      responses:
        200:
          description: Все инструменты
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/instruments'
        400:
          $ref: '#/components/responses/400'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: Bearer
      bearerFormat: JWT

  parameters:
    portfolioId:
      in: path
      name: portfolioId
      schema:
        type: string
        format: uuid
      required: true
    network:
      in: path
      name: network
      schema:
        type: string
      required: true
    code:
      in: query
      name: code
      schema:
        type: string
      required: true
    state:
      in: query
      name: state
      schema:
        type: string
      required: true
    limit:
      in: query
      name: limit
      description: Размер списка
      schema:
        type: integer
      required: false
    page:
      in: query
      name: page
      description: Номер страницы списка
      schema:
        type: integer
      required: false
    cursor:
      in: query
      name: cursor
      description: Курсор страницы
      schema:
        type: string
      required: false

  responses:
    101:
      description: Switching Protocols
    200:
      description: OK
    201:
      description: Created
    202:
      description: Accepted
    204:
      description: No Content
    301:
      description: Moved Permanently
    400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    422:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    500:
      description: Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'

  schemas:
    authToken:
      type: object
      required: [ accessToken, expiresAt ]
      properties:
        accessToken:
          type: string
        expiresAt:
          type: string
          format: date-time
    authUser:
      type: object
      required: [ email, name, password ]
      properties:
        email:
          type: string
          format: example@example.ru
          x-oapi-codegen-extra-tags:
            validate: required,email
        name:
          type: string
        password:
          type: string
          x-oapi-codegen-extra-tags:
            validate: required,min=6
    loginUser:
      type: object
      required: [ email, password ]
      properties:
        email:
          type: string
          format: example@example.ru
          x-oapi-codegen-extra-tags:
            validate: required,email
        password:
          type: string
          x-oapi-codegen-extra-tags:
            validate: required,min=6
    authConfirm:
      type: object
      required: [ token ]
      properties:
        token:
          type: string
          format: uuid
          x-oapi-codegen-extra-tags:
            validate: required
    portfolios:
      type: array
      items:
        $ref: '#/components/schemas/portfolio'
    portfolio:
      type: object
      required: [ id, title, userId, currencyId, createdAt ]
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        userId:
          type: string
          format: uuid
        currencyId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    portfolioAdd:
      type: object
      required: [ title, currencyId ]
      properties:
        title:
          type: string
          x-oapi-codegen-extra-tags:
            validate: required
        currencyId:
          type: string
          format: uuid
          x-oapi-codegen-extra-tags:
            validate: required,uuid
    portfolioUpdate:
      type: object
      properties:
        title:
          type: string
          x-oapi-codegen-extra-tags:
            validate: omitempty,required
        active:
          type: boolean
        currencyId:
          type: string
          format: uuid
          x-oapi-codegen-extra-tags:
            validate: omitempty,required,uuid
    instruments:
      type: array
      items:
        $ref: '#/components/schemas/instrument'
    instrument:
      type: object
      required: [ id, title, description, createdAt, updatedAt ]
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string

    meta:
      type: object
      required: [ pagination ]
      description: Метаданные
      properties:
        pagination:
          oneOf:
            - $ref: '#/components/schemas/pagingCursor'
            - $ref: '#/components/schemas/pagingOffset'
    pagingCursor:
      type: object
      required: [ limit, count, cursorNext, cursorPrev ]
      description: Данные пагинации
      properties:
        count:
          type: integer
          description: Кол-во элементов
          minimum: 0
        limit:
          type: integer
          description: Кол-во элементов на странице
          minimum: 1
        cursorNext:
          type: string
          nullable: true
          description: Курсор для следующей страницы
        cursorPrev:
          type: string
          nullable: true
          description: Курсор для предыдущей страницы
    pagingOffset:
      type: object
      required: [ page, limit, total ]
      description: Данные пагинации
      properties:
        page:
          type: integer
          description: Текущая страница
          minimum: 1
        limit:
          type: integer
          description: Кол-во элементов на странице
          minimum: 1
        total:
          type: integer
          description: Всего элементов
          minimum: 1

    error:
      type: object
      required: [ error ]
      properties:
        error:
          $ref: '#/components/schemas/errorMessage'
    errorMessage:
      type: object
      required: [ message, details ]
      description: Объект ошибки
      properties:
        message:
          type: string
          description: Описание ошибки
        details:
          type: array
          description: В каком поле произошла ошибка
          items:
            $ref: '#/components/schemas/errorDetail'
    errorDetail:
      type: object
      required: [ message, field ]
      properties:
        message:
          type: string
          description: Описание ошибки
        field:
          type: string
          description: Поле в котором произошла ошибка
