//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserNetworks = newUserNetworksTable("public", "user_networks", "")

type userNetworksTable struct {
	postgres.Table

	//Columns
	ID        postgres.ColumnString
	UserID    postgres.ColumnString
	Identity  postgres.ColumnString
	Strategy  postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserNetworksTable struct {
	userNetworksTable

	EXCLUDED userNetworksTable
}

// AS creates new UserNetworksTable with assigned alias
func (a UserNetworksTable) AS(alias string) *UserNetworksTable {
	return newUserNetworksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserNetworksTable with assigned schema name
func (a UserNetworksTable) FromSchema(schemaName string) *UserNetworksTable {
	return newUserNetworksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserNetworksTable with assigned table prefix
func (a UserNetworksTable) WithPrefix(prefix string) *UserNetworksTable {
	return newUserNetworksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserNetworksTable with assigned table suffix
func (a UserNetworksTable) WithSuffix(suffix string) *UserNetworksTable {
	return newUserNetworksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserNetworksTable(schemaName, tableName, alias string) *UserNetworksTable {
	return &UserNetworksTable{
		userNetworksTable: newUserNetworksTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newUserNetworksTableImpl("", "excluded", ""),
	}
}

func newUserNetworksTableImpl(schemaName, tableName, alias string) userNetworksTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		UserIDColumn    = postgres.StringColumn("user_id")
		IdentityColumn  = postgres.StringColumn("identity")
		StrategyColumn  = postgres.StringColumn("strategy")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, UserIDColumn, IdentityColumn, StrategyColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{UserIDColumn, IdentityColumn, StrategyColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return userNetworksTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		UserID:    UserIDColumn,
		Identity:  IdentityColumn,
		Strategy:  StrategyColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
