//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Registers = newRegistersTable("public", "registers", "")

type registersTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnString
	Identify   postgres.ColumnString
	ProviderID postgres.ColumnString
	MarketID   postgres.ColumnString
	CreatedAt  postgres.ColumnTimestampz
	UpdatedAt  postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RegistersTable struct {
	registersTable

	EXCLUDED registersTable
}

// AS creates new RegistersTable with assigned alias
func (a RegistersTable) AS(alias string) *RegistersTable {
	return newRegistersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RegistersTable with assigned schema name
func (a RegistersTable) FromSchema(schemaName string) *RegistersTable {
	return newRegistersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RegistersTable with assigned table prefix
func (a RegistersTable) WithPrefix(prefix string) *RegistersTable {
	return newRegistersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RegistersTable with assigned table suffix
func (a RegistersTable) WithSuffix(suffix string) *RegistersTable {
	return newRegistersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRegistersTable(schemaName, tableName, alias string) *RegistersTable {
	return &RegistersTable{
		registersTable: newRegistersTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newRegistersTableImpl("", "excluded", ""),
	}
}

func newRegistersTableImpl(schemaName, tableName, alias string) registersTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		IdentifyColumn   = postgres.StringColumn("identify")
		ProviderIDColumn = postgres.StringColumn("provider_id")
		MarketIDColumn   = postgres.StringColumn("market_id")
		CreatedAtColumn  = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampzColumn("updated_at")
		allColumns       = postgres.ColumnList{IDColumn, IdentifyColumn, ProviderIDColumn, MarketIDColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns   = postgres.ColumnList{IdentifyColumn, ProviderIDColumn, MarketIDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return registersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Identify:   IdentifyColumn,
		ProviderID: ProviderIDColumn,
		MarketID:   MarketIDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
