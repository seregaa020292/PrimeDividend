//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Markets = newMarketsTable("public", "markets", "")

type marketsTable struct {
	postgres.Table

	//Columns
	ID           postgres.ColumnString
	Title        postgres.ColumnString
	Ticker       postgres.ColumnString
	Content      postgres.ColumnString
	ImageURL     postgres.ColumnString
	CurrencyID   postgres.ColumnString
	InstrumentID postgres.ColumnString
	CreatedAt    postgres.ColumnTimestampz
	UpdatedAt    postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MarketsTable struct {
	marketsTable

	EXCLUDED marketsTable
}

// AS creates new MarketsTable with assigned alias
func (a MarketsTable) AS(alias string) *MarketsTable {
	return newMarketsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MarketsTable with assigned schema name
func (a MarketsTable) FromSchema(schemaName string) *MarketsTable {
	return newMarketsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MarketsTable with assigned table prefix
func (a MarketsTable) WithPrefix(prefix string) *MarketsTable {
	return newMarketsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MarketsTable with assigned table suffix
func (a MarketsTable) WithSuffix(suffix string) *MarketsTable {
	return newMarketsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMarketsTable(schemaName, tableName, alias string) *MarketsTable {
	return &MarketsTable{
		marketsTable: newMarketsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newMarketsTableImpl("", "excluded", ""),
	}
}

func newMarketsTableImpl(schemaName, tableName, alias string) marketsTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		TitleColumn        = postgres.StringColumn("title")
		TickerColumn       = postgres.StringColumn("ticker")
		ContentColumn      = postgres.StringColumn("content")
		ImageURLColumn     = postgres.StringColumn("image_url")
		CurrencyIDColumn   = postgres.StringColumn("currency_id")
		InstrumentIDColumn = postgres.StringColumn("instrument_id")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		allColumns         = postgres.ColumnList{IDColumn, TitleColumn, TickerColumn, ContentColumn, ImageURLColumn, CurrencyIDColumn, InstrumentIDColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = postgres.ColumnList{TitleColumn, TickerColumn, ContentColumn, ImageURLColumn, CurrencyIDColumn, InstrumentIDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return marketsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Title:        TitleColumn,
		Ticker:       TickerColumn,
		Content:      ContentColumn,
		ImageURL:     ImageURLColumn,
		CurrencyID:   CurrencyIDColumn,
		InstrumentID: InstrumentIDColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
