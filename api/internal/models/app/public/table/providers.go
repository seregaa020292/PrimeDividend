//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Providers = newProvidersTable("public", "providers", "")

type providersTable struct {
	postgres.Table

	//Columns
	ID          postgres.ColumnString
	Title       postgres.ColumnString
	Description postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ProvidersTable struct {
	providersTable

	EXCLUDED providersTable
}

// AS creates new ProvidersTable with assigned alias
func (a ProvidersTable) AS(alias string) *ProvidersTable {
	return newProvidersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProvidersTable with assigned schema name
func (a ProvidersTable) FromSchema(schemaName string) *ProvidersTable {
	return newProvidersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProvidersTable with assigned table prefix
func (a ProvidersTable) WithPrefix(prefix string) *ProvidersTable {
	return newProvidersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProvidersTable with assigned table suffix
func (a ProvidersTable) WithSuffix(suffix string) *ProvidersTable {
	return newProvidersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProvidersTable(schemaName, tableName, alias string) *ProvidersTable {
	return &ProvidersTable{
		providersTable: newProvidersTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newProvidersTableImpl("", "excluded", ""),
	}
}

func newProvidersTableImpl(schemaName, tableName, alias string) providersTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		TitleColumn       = postgres.StringColumn("title")
		DescriptionColumn = postgres.StringColumn("description")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		allColumns        = postgres.ColumnList{IDColumn, TitleColumn, DescriptionColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{TitleColumn, DescriptionColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return providersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Title:       TitleColumn,
		Description: DescriptionColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
