// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Аутентификация по Email
	// (POST /auth/email)
	JoinEmail(w http.ResponseWriter, r *http.Request)
	// Авторизация по Email
	// (POST /auth/email/confirm)
	ConfirmEmail(w http.ResponseWriter, r *http.Request)
	// Логин по Email
	// (POST /auth/email/login)
	LoginEmail(w http.ResponseWriter, r *http.Request)
	// Аутентификация в соц. сетях
	// (POST /auth/{network})
	JoinNetwork(w http.ResponseWriter, r *http.Request, network Network)
	// Авторизация в соц. сетях
	// (GET /auth/{network}/callback)
	ConfirmNetwork(w http.ResponseWriter, r *http.Request, network Network)

	// (GET /instrument)
	GetInstruments(w http.ResponseWriter, r *http.Request)
	// Создание портфеля
	// (POST /portfolio)
	CreatePortfolio(w http.ResponseWriter, r *http.Request)
	// Получение портфеля по ID
	// (GET /portfolio/{portfolioId})
	GetPortfolio(w http.ResponseWriter, r *http.Request, portfolioId PortfolioId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// JoinEmail operation middleware
func (siw *ServerInterfaceWrapper) JoinEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.JoinEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ConfirmEmail operation middleware
func (siw *ServerInterfaceWrapper) ConfirmEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConfirmEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// LoginEmail operation middleware
func (siw *ServerInterfaceWrapper) LoginEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// JoinNetwork operation middleware
func (siw *ServerInterfaceWrapper) JoinNetwork(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "network" -------------
	var network Network

	err = runtime.BindStyledParameter("simple", false, "network", chi.URLParam(r, "network"), &network)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "network", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.JoinNetwork(w, r, network)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ConfirmNetwork operation middleware
func (siw *ServerInterfaceWrapper) ConfirmNetwork(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "network" -------------
	var network Network

	err = runtime.BindStyledParameter("simple", false, "network", chi.URLParam(r, "network"), &network)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "network", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConfirmNetwork(w, r, network)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetInstruments operation middleware
func (siw *ServerInterfaceWrapper) GetInstruments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInstruments(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreatePortfolio operation middleware
func (siw *ServerInterfaceWrapper) CreatePortfolio(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortfolio(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPortfolio operation middleware
func (siw *ServerInterfaceWrapper) GetPortfolio(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "portfolioId" -------------
	var portfolioId PortfolioId

	err = runtime.BindStyledParameter("simple", false, "portfolioId", chi.URLParam(r, "portfolioId"), &portfolioId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portfolioId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPortfolio(w, r, portfolioId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/email", wrapper.JoinEmail)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/email/confirm", wrapper.ConfirmEmail)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/email/login", wrapper.LoginEmail)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/{network}", wrapper.JoinNetwork)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{network}/callback", wrapper.ConfirmNetwork)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/instrument", wrapper.GetInstruments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/portfolio", wrapper.CreatePortfolio)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/portfolio/{portfolioId}", wrapper.GetPortfolio)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/BEAAP//eg/aqcEaAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
