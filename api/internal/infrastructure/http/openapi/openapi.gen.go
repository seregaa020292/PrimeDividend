// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Аутентификация по Email
	// (POST /auth/email)
	AuthEmail(w http.ResponseWriter, r *http.Request)
	// Авторизация по Email
	// (POST /auth/email/confirm)
	AuthEmailConfirm(w http.ResponseWriter, r *http.Request)
	// Аутентификация в соц. сетях
	// (GET /auth/{network})
	AuthNetwork(w http.ResponseWriter, r *http.Request, network Network)
	// Авторизация в соц. сетях
	// (GET /auth/{network}/callback)
	AuthNetworkCallback(w http.ResponseWriter, r *http.Request, network Network)

	// (GET /instrument)
	GetInstruments(w http.ResponseWriter, r *http.Request)
	// Создание портфеля
	// (POST /portfolio)
	CreatePortfolio(w http.ResponseWriter, r *http.Request)
	// Получение портфеля по ID
	// (GET /portfolio/{portfolioId})
	GetPortfolioById(w http.ResponseWriter, r *http.Request, portfolioId PortfolioId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// AuthEmail operation middleware
func (siw *ServerInterfaceWrapper) AuthEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AuthEmailConfirm operation middleware
func (siw *ServerInterfaceWrapper) AuthEmailConfirm(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthEmailConfirm(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AuthNetwork operation middleware
func (siw *ServerInterfaceWrapper) AuthNetwork(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "network" -------------
	var network Network

	err = runtime.BindStyledParameter("simple", false, "network", chi.URLParam(r, "network"), &network)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "network", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthNetwork(w, r, network)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AuthNetworkCallback operation middleware
func (siw *ServerInterfaceWrapper) AuthNetworkCallback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "network" -------------
	var network Network

	err = runtime.BindStyledParameter("simple", false, "network", chi.URLParam(r, "network"), &network)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "network", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthNetworkCallback(w, r, network)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetInstruments operation middleware
func (siw *ServerInterfaceWrapper) GetInstruments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInstruments(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreatePortfolio operation middleware
func (siw *ServerInterfaceWrapper) CreatePortfolio(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortfolio(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPortfolioById operation middleware
func (siw *ServerInterfaceWrapper) GetPortfolioById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "portfolioId" -------------
	var portfolioId PortfolioId

	err = runtime.BindStyledParameter("simple", false, "portfolioId", chi.URLParam(r, "portfolioId"), &portfolioId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portfolioId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPortfolioById(w, r, portfolioId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/email", wrapper.AuthEmail)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/email/confirm", wrapper.AuthEmailConfirm)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{network}", wrapper.AuthNetwork)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{network}/callback", wrapper.AuthNetworkCallback)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/instrument", wrapper.GetInstruments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/portfolio", wrapper.CreatePortfolio)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/portfolio/{portfolioId}", wrapper.GetPortfolioById)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//oV++quMWAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
