// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Аутентификация в соц. сетях
	// (GET /auth/{network})
	AuthNetwork(w http.ResponseWriter, r *http.Request, network Network)
	// Авторизация в соц. сетях
	// (GET /auth/{network}/callback)
	AuthNetworkCallback(w http.ResponseWriter, r *http.Request, network Network)

	// (GET /instrument)
	GetInstruments(w http.ResponseWriter, r *http.Request)
	// Создание портфеля
	// (POST /portfolio)
	CreatePortfolio(w http.ResponseWriter, r *http.Request)
	// Получение портфеля по ID
	// (GET /portfolio/{portfolioId})
	GetPortfolioById(w http.ResponseWriter, r *http.Request, portfolioId PortfolioId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// AuthNetwork operation middleware
func (siw *ServerInterfaceWrapper) AuthNetwork(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "network" -------------
	var network Network

	err = runtime.BindStyledParameter("simple", false, "network", chi.URLParam(r, "network"), &network)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "network", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthNetwork(w, r, network)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AuthNetworkCallback operation middleware
func (siw *ServerInterfaceWrapper) AuthNetworkCallback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "network" -------------
	var network Network

	err = runtime.BindStyledParameter("simple", false, "network", chi.URLParam(r, "network"), &network)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "network", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthNetworkCallback(w, r, network)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetInstruments operation middleware
func (siw *ServerInterfaceWrapper) GetInstruments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInstruments(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreatePortfolio operation middleware
func (siw *ServerInterfaceWrapper) CreatePortfolio(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortfolio(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPortfolioById operation middleware
func (siw *ServerInterfaceWrapper) GetPortfolioById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "portfolioId" -------------
	var portfolioId PortfolioId

	err = runtime.BindStyledParameter("simple", false, "portfolioId", chi.URLParam(r, "portfolioId"), &portfolioId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portfolioId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPortfolioById(w, r, portfolioId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{network}", wrapper.AuthNetwork)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{network}/callback", wrapper.AuthNetworkCallback)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/instrument", wrapper.GetInstruments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/portfolio", wrapper.CreatePortfolio)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/portfolio/{portfolioId}", wrapper.GetPortfolioById)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXS2/bxhP/KsT+/0faVJr2olsebeGiDQykRQ+GD2tyLDMhuezu0okgCIiVR1skqIOc",
	"emqQS8+OGteqHctfYfYbFbOkRFKkBatNDj3xsfP8zew8BswXcSoSSLRi3QFLueQxaJD2KwH9QMj79Bom",
	"rMtSrveYyxIeA+vOT10m4YcslBCwrpYZuEz5exBzYtP9lEiVlmHSY8Ohy1Ih9a6IQrERXCK3SrFM9q6Q",
	"Mdesy7IsJMpFXUNiVqlIFFhvPul8So8AlC/DVIeCVN8Rzi2RaEg0G7rseudak+QbsQ+Bswky5oRT1CfK",
	"zzodovQL3u6A8TSNQp8Tk3dPEeegYuz/JeyyLvufV+Lt5afKAymFzA2ua74Lch+k83lxPnPeepMzUcik",
	"SEHqMHcy4NrqS7Io4jsR5LAN3ZzekoQaYtXk3A0hCpre42uc4hkeOzh28BSnZoRT8win+N7BC/sywROc",
	"mp/wDI8c+zLBt3iKR82QuCwGpXgPWtT8hhc4MQd4hOc4IXWlpElLcKuJsTUXuz0nFDv3wLcxLX5wKXm/",
	"wVig0sYXJkrLLC6iW8fKl8A1BDd0LQ8DrmFNhzG0eV5zd9A8D4Mr5LTLdKgjaBWQpcFqNi1Akeuz4uvW",
	"uhV3q2qWg1ZPtWXpXwG6Ea5KvfggUbgSym3AlLra3J4b+Z1Fp8XUTEpI/P7GFfS77OGa4Gm45osAepCs",
	"wUMt+ZrmPStqn0dhrmRupWvlDC9Pj9VFWmmZAvlxLV6AepZ+hWK3ilsTdyqI4Gcy1P27lEs51DeBS5A3",
	"Mr1HXzv264uZ+V99/y0ryihJyk9Lf/a0TnOr4KEGmfDotvBVS7V6gxd4bJ7hxDzBCRU7+37o3H3Aez0r",
	"MZNRIVB1PU/l/9dD4akU/HC36BT5ndkVTRU3NjccfIdn5jCvsxM8wyn+icdUH82hsynDGG6H+2EASXlz",
	"u2zx/z5IlUu8tt5Zv0YKRQoJT0PWZdfXO+sd5toGbN30eKb3vEHR2of0qwf2flE2W5MpIRjBe2fe/6tT",
	"w1b7ZS9JvNncMNxeaNBF921jn9N5RFT23+W0RGSzJItjLvsUuJfmsRkRiGbUCB6OHXOAU/NsnZ7HZmQO",
	"zVOC1ubxFiNs2DYJXIDJ83kU7XD//lXwujWj/W/hhuOi81O7/weI1dtpK0hfgt6o9I/G+LbaxNU+F12t",
	"Eam8mC6Um8Z8hq/IawcneG4OzMg8Mo/xfZ5c5vnKaM9AqyCVQ1dvgUK1QHfLtqfNOWFeVkHpmyLof7BB",
	"dbHNLdTvYtJsG7qXI0BEK+dmUfntzanW/K1tuiCV1H2DUzzBd+VkeUF5bEbmCR5Tfa3ka4n0AvLeoLKV",
	"DJdl8DwGN/u2g612x6u7T+Oef/wbUPp/pfzXIhD/pqjY1cI8Nj/mXa0lNvaHs3H7shjZRKAlKUe3bt7X",
	"wueRk5/XOnLX8yI62xNKe9QJCepCfqPVL+kYroNHbXXRpZLwrp2n3HNtcRy6DYW/4jmO8ZgqCgkuGWgq",
	"amN4hUd4Zn4xI7tzFcSzyamN4TVOrXQy/mdr3GS2203sSjfGKZ5WNnIpaJ5oVf67jd25eX5pIXTzIOIp",
	"bYjmwBzUIbHrXaGotgq0Dl20Ik7x1DHPZnrNUwffWn1H+EcpKubyPlwiZmwO8cS8cMxBnnB1LOxq20DD",
	"wclcKU7xr4pS+iwVS+iFSreD9bqW3S8sYNVYVwNYuYtNQS/xlMzDsXm+VAhXikDYHv4dAAD//7u5jK7p",
	"EQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
