// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Создание пользователя
	// (POST /auth/email)
	JoinEmail(w http.ResponseWriter, r *http.Request)
	// Подтверждение почты
	// (POST /auth/email/confirm)
	ConfirmEmail(w http.ResponseWriter, r *http.Request)
	// Аутентификация по Email
	// (POST /auth/email/login)
	LoginEmail(w http.ResponseWriter, r *http.Request)
	// Выход из аккаунта
	// (POST /auth/logout)
	Logout(w http.ResponseWriter, r *http.Request)
	// Обновить токены
	// (POST /auth/refresh-token)
	RefreshToken(w http.ResponseWriter, r *http.Request)
	// Аутентификация через соц. сети
	// (GET /auth/{network})
	JoinNetwork(w http.ResponseWriter, r *http.Request, network Network)
	// Авторизация через соц. сети
	// (GET /auth/{network}/callback)
	ConfirmNetwork(w http.ResponseWriter, r *http.Request, network Network, params ConfirmNetworkParams)

	// (GET /instrument)
	GetInstruments(w http.ResponseWriter, r *http.Request)
	// Получение списка портфелей
	// (GET /portfolio)
	GetPortfolios(w http.ResponseWriter, r *http.Request, params GetPortfoliosParams)
	// Создание портфеля
	// (POST /portfolio)
	CreatePortfolio(w http.ResponseWriter, r *http.Request)
	// Удаление портфеля
	// (DELETE /portfolio/{portfolioId})
	RemovePortfolio(w http.ResponseWriter, r *http.Request, portfolioId PortfolioId)
	// Получение портфеля по ID
	// (GET /portfolio/{portfolioId})
	GetPortfolio(w http.ResponseWriter, r *http.Request, portfolioId PortfolioId)
	// Редактирование портфеля
	// (PATCH /portfolio/{portfolioId})
	UpdatePortfolio(w http.ResponseWriter, r *http.Request, portfolioId PortfolioId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// JoinEmail operation middleware
func (siw *ServerInterfaceWrapper) JoinEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.JoinEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ConfirmEmail operation middleware
func (siw *ServerInterfaceWrapper) ConfirmEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConfirmEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// LoginEmail operation middleware
func (siw *ServerInterfaceWrapper) LoginEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Logout(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefreshToken(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// JoinNetwork operation middleware
func (siw *ServerInterfaceWrapper) JoinNetwork(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "network" -------------
	var network Network

	err = runtime.BindStyledParameter("simple", false, "network", chi.URLParam(r, "network"), &network)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "network", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.JoinNetwork(w, r, network)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ConfirmNetwork operation middleware
func (siw *ServerInterfaceWrapper) ConfirmNetwork(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "network" -------------
	var network Network

	err = runtime.BindStyledParameter("simple", false, "network", chi.URLParam(r, "network"), &network)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "network", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ConfirmNetworkParams

	// ------------- Required query parameter "code" -------------
	if paramValue := r.URL.Query().Get("code"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "code"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Required query parameter "state" -------------
	if paramValue := r.URL.Query().Get("state"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "state"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConfirmNetwork(w, r, network, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetInstruments operation middleware
func (siw *ServerInterfaceWrapper) GetInstruments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInstruments(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPortfolios operation middleware
func (siw *ServerInterfaceWrapper) GetPortfolios(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPortfoliosParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------
	if paramValue := r.URL.Query().Get("cursor"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPortfolios(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreatePortfolio operation middleware
func (siw *ServerInterfaceWrapper) CreatePortfolio(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortfolio(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RemovePortfolio operation middleware
func (siw *ServerInterfaceWrapper) RemovePortfolio(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "portfolioId" -------------
	var portfolioId PortfolioId

	err = runtime.BindStyledParameter("simple", false, "portfolioId", chi.URLParam(r, "portfolioId"), &portfolioId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portfolioId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemovePortfolio(w, r, portfolioId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPortfolio operation middleware
func (siw *ServerInterfaceWrapper) GetPortfolio(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "portfolioId" -------------
	var portfolioId PortfolioId

	err = runtime.BindStyledParameter("simple", false, "portfolioId", chi.URLParam(r, "portfolioId"), &portfolioId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portfolioId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPortfolio(w, r, portfolioId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdatePortfolio operation middleware
func (siw *ServerInterfaceWrapper) UpdatePortfolio(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "portfolioId" -------------
	var portfolioId PortfolioId

	err = runtime.BindStyledParameter("simple", false, "portfolioId", chi.URLParam(r, "portfolioId"), &portfolioId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portfolioId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePortfolio(w, r, portfolioId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/email", wrapper.JoinEmail)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/email/confirm", wrapper.ConfirmEmail)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/email/login", wrapper.LoginEmail)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/logout", wrapper.Logout)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/refresh-token", wrapper.RefreshToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{network}", wrapper.JoinNetwork)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{network}/callback", wrapper.ConfirmNetwork)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/instrument", wrapper.GetInstruments)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/portfolio", wrapper.GetPortfolios)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/portfolio", wrapper.CreatePortfolio)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/portfolio/{portfolioId}", wrapper.RemovePortfolio)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/portfolio/{portfolioId}", wrapper.GetPortfolio)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/portfolio/{portfolioId}", wrapper.UpdatePortfolio)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Ufq/AwAA//8fGF2lzysAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
