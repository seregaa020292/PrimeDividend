// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Создание пользователя
	// (POST /auth/email)
	JoinEmail(w http.ResponseWriter, r *http.Request)
	// Подтверждение почты
	// (POST /auth/email/confirm)
	ConfirmEmail(w http.ResponseWriter, r *http.Request)
	// Аутентификация по Email
	// (POST /auth/email/login)
	LoginEmail(w http.ResponseWriter, r *http.Request)
	// Выход из аккаунта
	// (POST /auth/logout)
	Logout(w http.ResponseWriter, r *http.Request)
	// Обновить токены
	// (POST /auth/refresh-token)
	RefreshToken(w http.ResponseWriter, r *http.Request)
	// Аутентификация через соц. сети
	// (GET /auth/{network})
	JoinNetwork(w http.ResponseWriter, r *http.Request, network Network)
	// Авторизация через соц. сети
	// (GET /auth/{network}/callback)
	ConfirmNetwork(w http.ResponseWriter, r *http.Request, network Network, params ConfirmNetworkParams)
	// Получение всех валют
	// (GET /currency)
	GetCurrencies(w http.ResponseWriter, r *http.Request)
	// Получение валюты по ID
	// (GET /currency/{currencyId})
	GetCurrency(w http.ResponseWriter, r *http.Request, currencyId CurrencyId)
	// Получение инструментов
	// (GET /instrument)
	GetInstruments(w http.ResponseWriter, r *http.Request)
	// Получение инструмента по ID
	// (GET /instrument/{instrumentId})
	GetInstrument(w http.ResponseWriter, r *http.Request, instrumentId InstrumentId)
	// Получение списка ценных бумаг
	// (GET /market)
	GetMarkets(w http.ResponseWriter, r *http.Request, params GetMarketsParams)
	// Получение ценной бумаги по ID
	// (GET /market/{marketId})
	GetMarket(w http.ResponseWriter, r *http.Request, marketId MarketId)
	// Получение ценной бумаги по тикеру
	// (GET /market/{ticker})
	GetMarketByTicker(w http.ResponseWriter, r *http.Request, ticker Ticker)
	// Получение списка портфелей
	// (GET /portfolio)
	GetPortfolios(w http.ResponseWriter, r *http.Request, params GetPortfoliosParams)
	// Создание портфеля
	// (POST /portfolio)
	CreatePortfolio(w http.ResponseWriter, r *http.Request)
	// Удаление портфеля
	// (DELETE /portfolio/{portfolioId})
	RemovePortfolio(w http.ResponseWriter, r *http.Request, portfolioId PortfolioId)
	// Получение портфеля по ID
	// (GET /portfolio/{portfolioId})
	GetPortfolio(w http.ResponseWriter, r *http.Request, portfolioId PortfolioId)
	// Редактирование портфеля
	// (PATCH /portfolio/{portfolioId})
	UpdatePortfolio(w http.ResponseWriter, r *http.Request, portfolioId PortfolioId)
	// Получение поставщиков котировок
	// (GET /provider)
	GetProviders(w http.ResponseWriter, r *http.Request)
	// Получение поставщика котировок по ID
	// (GET /provider/{providerId})
	GetProvider(w http.ResponseWriter, r *http.Request, providerId ProviderId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// JoinEmail operation middleware
func (siw *ServerInterfaceWrapper) JoinEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.JoinEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ConfirmEmail operation middleware
func (siw *ServerInterfaceWrapper) ConfirmEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConfirmEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// LoginEmail operation middleware
func (siw *ServerInterfaceWrapper) LoginEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Logout(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefreshToken(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// JoinNetwork operation middleware
func (siw *ServerInterfaceWrapper) JoinNetwork(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "network" -------------
	var network Network

	err = runtime.BindStyledParameter("simple", false, "network", chi.URLParam(r, "network"), &network)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "network", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.JoinNetwork(w, r, network)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ConfirmNetwork operation middleware
func (siw *ServerInterfaceWrapper) ConfirmNetwork(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "network" -------------
	var network Network

	err = runtime.BindStyledParameter("simple", false, "network", chi.URLParam(r, "network"), &network)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "network", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ConfirmNetworkParams

	// ------------- Required query parameter "code" -------------
	if paramValue := r.URL.Query().Get("code"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "code"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Required query parameter "state" -------------
	if paramValue := r.URL.Query().Get("state"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "state"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConfirmNetwork(w, r, network, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetCurrencies operation middleware
func (siw *ServerInterfaceWrapper) GetCurrencies(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrencies(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetCurrency operation middleware
func (siw *ServerInterfaceWrapper) GetCurrency(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "currencyId" -------------
	var currencyId CurrencyId

	err = runtime.BindStyledParameter("simple", false, "currencyId", chi.URLParam(r, "currencyId"), &currencyId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "currencyId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrency(w, r, currencyId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetInstruments operation middleware
func (siw *ServerInterfaceWrapper) GetInstruments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInstruments(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetInstrument operation middleware
func (siw *ServerInterfaceWrapper) GetInstrument(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "instrumentId" -------------
	var instrumentId InstrumentId

	err = runtime.BindStyledParameter("simple", false, "instrumentId", chi.URLParam(r, "instrumentId"), &instrumentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "instrumentId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInstrument(w, r, instrumentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetMarkets operation middleware
func (siw *ServerInterfaceWrapper) GetMarkets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMarketsParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------
	if paramValue := r.URL.Query().Get("cursor"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMarkets(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetMarket operation middleware
func (siw *ServerInterfaceWrapper) GetMarket(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "marketId" -------------
	var marketId MarketId

	err = runtime.BindStyledParameter("simple", false, "marketId", chi.URLParam(r, "marketId"), &marketId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "marketId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMarket(w, r, marketId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetMarketByTicker operation middleware
func (siw *ServerInterfaceWrapper) GetMarketByTicker(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ticker" -------------
	var ticker Ticker

	err = runtime.BindStyledParameter("simple", false, "ticker", chi.URLParam(r, "ticker"), &ticker)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ticker", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMarketByTicker(w, r, ticker)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPortfolios operation middleware
func (siw *ServerInterfaceWrapper) GetPortfolios(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPortfoliosParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------
	if paramValue := r.URL.Query().Get("cursor"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPortfolios(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreatePortfolio operation middleware
func (siw *ServerInterfaceWrapper) CreatePortfolio(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortfolio(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RemovePortfolio operation middleware
func (siw *ServerInterfaceWrapper) RemovePortfolio(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "portfolioId" -------------
	var portfolioId PortfolioId

	err = runtime.BindStyledParameter("simple", false, "portfolioId", chi.URLParam(r, "portfolioId"), &portfolioId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portfolioId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemovePortfolio(w, r, portfolioId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPortfolio operation middleware
func (siw *ServerInterfaceWrapper) GetPortfolio(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "portfolioId" -------------
	var portfolioId PortfolioId

	err = runtime.BindStyledParameter("simple", false, "portfolioId", chi.URLParam(r, "portfolioId"), &portfolioId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portfolioId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPortfolio(w, r, portfolioId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdatePortfolio operation middleware
func (siw *ServerInterfaceWrapper) UpdatePortfolio(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "portfolioId" -------------
	var portfolioId PortfolioId

	err = runtime.BindStyledParameter("simple", false, "portfolioId", chi.URLParam(r, "portfolioId"), &portfolioId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portfolioId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePortfolio(w, r, portfolioId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProviders operation middleware
func (siw *ServerInterfaceWrapper) GetProviders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProviders(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProvider operation middleware
func (siw *ServerInterfaceWrapper) GetProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId ProviderId

	err = runtime.BindStyledParameter("simple", false, "providerId", chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProvider(w, r, providerId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/email", wrapper.JoinEmail)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/email/confirm", wrapper.ConfirmEmail)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/email/login", wrapper.LoginEmail)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/logout", wrapper.Logout)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/refresh-token", wrapper.RefreshToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{network}", wrapper.JoinNetwork)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{network}/callback", wrapper.ConfirmNetwork)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/currency", wrapper.GetCurrencies)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/currency/{currencyId}", wrapper.GetCurrency)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/instrument", wrapper.GetInstruments)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/instrument/{instrumentId}", wrapper.GetInstrument)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/market", wrapper.GetMarkets)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/market/{marketId}", wrapper.GetMarket)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/market/{ticker}", wrapper.GetMarketByTicker)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/portfolio", wrapper.GetPortfolios)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/portfolio", wrapper.CreatePortfolio)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/portfolio/{portfolioId}", wrapper.RemovePortfolio)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/portfolio/{portfolioId}", wrapper.GetPortfolio)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/portfolio/{portfolioId}", wrapper.UpdatePortfolio)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/provider", wrapper.GetProviders)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/provider/{providerId}", wrapper.GetProvider)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbXW/cxtX+KwTf93KllSO3FwsUqD+SwmkcG7GNXhi+GHFnV4xJDj0cyloIC+gjcZrK",
	"TQqjF0VQxGkL9Hote6O1ZK3/wpl/VMwMuRySw12upJVaI1f64HDOnOc558yZc4ZbtkP8kAQ4YJHd2rJD",
	"RJGPGabyL4e0sfjpBnbLfhJj2rMbdoB8bLfUs4ZN8ZPYpbhttxiNccOOnHXsI/ES64ViXMSoG3Ttfr9h",
	"OzGlOHB6t9qTSUPE1rU5swHTZu4Q6iNmt+w4dsVIo6SIUDG2jSOHuiFziRAHP/A9vs13YMy3Lb7Dd/k2",
	"DOAERvwZ37cbZkXVXNNVc4OI0djHAatULjfkbOp5ru8yg3Y/wQAO4R0MpXbwHkZ8B45gUKGZmsagmBsw",
	"3MVUyvIRfYyrtZo8PptGAWZPCX1cISR9Op+5hYSyDvFcUrl4fcTZ1h9SsuG2Ma0WlQ04m6SIIVbplOrh",
	"fDAx13mMacWyk4fzzNgXg6OQBBGWQeSjlZWyqd75vd1v2B+tXCk/ukExYritnl8tP/+cWDdIwHDAxJBV",
	"0xS3yQZuW3cx9ZGIbF5PjLyq1uEk77a2bBSGnusg8VLzy0i8uaXp9f8Ud+yW/X/NLEI21dOoiSklVOma",
	"l3wdta0v8JMYR0zJXF28zE8IXXPbbRwIib+6CC3vYbqBqfVx8jy1Bkk3itn6DRJ0XOrLDYWSEFPmKltg",
	"5DEOZtt5w95cIih0l8Qm08XBEt5kFC0x1JWzbCDPbUsvyMwysbvUSB8moh5NpiZrX2JHkiJWeD9dSH59",
	"yHFwFE0eFky7YePN0KU4usZyOoi1LDHXx0aH1Relz6/PVrXMB5HyzPwqsY9cL7cCvIn80MO/TX4u0/gc",
	"MG0oOTI8y2hgACREUfSU0Hb54Snk+W7wm1+XmVTLSBahiTSBlmQQCVAuw340y8rTpEO8nsyHKEU9bbpe",
	"mQNHRan6llDwIQOWbrvGDiDiNfPMZMRhe741FYBW8uT0+dU28plZpruJAhU1ykab/ntmxLmNowh1cWl5",
	"aoZKkTcxS9wiL7jjYq9tSJZewhiOYWjBgQVHMOa7IimEMbyz4L38ZQSHMOZ/hGMYWPKXEbxKsqkS9H6y",
	"5rKYH5M0TKaZQlw202gmI+m0jUSLSuVvT5H/iv8JhnDEd4uy8zi1JX6RYYoXAqCBAEmCk+I2E6Va7qdz",
	"Z/DAhQObqm2CNkvZfwkAU30+A6p+3NXANfDuka4b/Ldsfxe5y03d3tRpy2CMWbpXMopTGGr+oD7TIGva",
	"reujLn5APbPtFw7QNbwgPbZcloNMzka5zbFwzJ/uN4rP+j6T8G+MkwwZguTfYch3YQBvZJg84fswLAX+",
	"EHXdAKVRiQT4TsduPZy+EPlO94YqjfQbdQbf6XQisfZHRVA1+SaMcqLKGv4100zsTQN4DSM4gQF/BiPD",
	"LueQODCVTn4Qu9oSHMDY4n8W+xu8gyGciKwADuyG7buB68e+3VpplKokab3pc7zJZtSc4A0c8+8tviNF",
	"vOF7/Dv+LQzhrakaFcSeh9aEKaszt8lPI0LvUrxRT6zcsoXYfSn69IKrClBTUbQELQVx0hwn2F5pmCpQ",
	"uq2kJStFYw74HBzVhpSY4ZkN6eIgkCs3ZUD/lGmd4HEgbSo362DmrIww5JnSPb4DQ3g90xNmsxWqFCsl",
	"TQk0UpMW4s4lz1rM9nWOu0rDjqO0Vji74le5ASWTzHU6myB9rd02gD0HcqdIfeQ8/Wosz6Xuk4CjqTIV",
	"hwdhOymoFktBzN3Q17hGiIdRMK+B1deJ+CIHCFmvsQDAypMr6KqBqZ+VZN5rSEzSwvciTlAz96kPpKSS",
	"YjgHJSnqJUb6DTvCTkxd1rsnBisurmNEMb0Ws3Xx15r865NU3U//cD/tEomJ1NhM9XXGQmVMeJNhGiDv",
	"JnFMdYR/wHsYiu2UfwUjOFJbK//euvcUdbtyxlicDuSEUavZjNT/l13SjELsuJ2kjK3OCx1SFnHt7q1c",
	"rjOCYxjDz2L/kpLuUtfHN10BTZAx07KL/9/ANFIzXlleWb4iBJIQByh07Za9uryyvCJPamxdqtlEMVtv",
	"To6lIYmkuQhbl+sVYcL+lLjBx8kZj6oOwXXS7p1bsX5SLi5EROEZ5ZbMlarpJuOaYlDWNpk+VgzKmg/T",
	"x4pB0gpj30e0pwxjDIfJGWWk0q8xHPPncChyDhjwXRgKUgVjMrQ9lNVxWx4lNPSbjtZ4MLKQdCYWTUTa",
	"AKnFxUodLlbm4yKP70sYwxu+Cwcw5NvwM7xRDpEgzb/huzLtn46trMhUI/uZeLxIXLOKUH1UawsulEIR",
	"q0WzauQYttFyy+ws9P2F70kPEDl4MXYKAq0U9ioCPdIlMZvKnXh+JstcraPaalG1F3yffy2s04IRHFqy",
	"yiyU25PKDqboRHGH4mh9adJSNKv2hRqWttz+F4zkdEj+CK/gRIbLEd/lzy15XjuSVjPNt7eSuxV9IbSL",
	"KzauzycXMPQLQhU1omxIM7240X9UgH61zg60Ou8OVN9t+DcyFA7h0JIlkmfL4udQjKwDVtNBnreGnMeV",
	"qCU7wJmBa8wcKi9i1Rin7oaUmPiwIiUcJH28ERyenmy97Wtk93eY3cg6zReOqNblrgWpzLxHQnc4skRC",
	"Bcf8O7571pTimO8JaNNU4kCC+rUuIEN3Amke4eZWdgzq14C7N7cnacesS7D97HLBok3fREjKA99XecKt",
	"m9WM5HudVTTc0hp9Fw6m3mU8hd2P4ETVSPlerqR5vqBXScmA15AuQt/c0ttH/XpMzO0SuRbVJTiF3vm9",
	"BLcwMTQwOEiJp6z7WkXK7aSfNy8jqkJeZ7NPOm4XT1raqtR6jVOHizHzOyl/Jnk6EccCC15Jhgbw+nwt",
	"QL8aXSkxs4OEdt0Gmlvpvef+bHOY2xomd6ovjebL8MuUCBjDW40IGBlc00iJ6sfXIOR6737aup+PmKTj",
	"/wstGS0iiRbHTBFNqwjKdfeqqLmb9R0+wOipdVUWG0BlQW+b7/KvYCibt28XGDsNwjITyFh/JNtKxnKs",
	"bHtMqF9Q5TDX86xVPLxap/B1dX5kk8aLNGq95fLwkbDJGRXxDOlcJVzHOedtzS3t+5a+apZ4WPU6i0Uy",
	"n2zkaJjPAfXvaKqcawEF7tpo/ksieZyves9GszE7WC0EqouIQ/VCCyNtcs7ZdwF6w+ZeCByIOetlElTb",
	"/jx5WGDcSe4YXGo3qLaz/ARD6S5Hsmy6rTpwpwhDWt+/0o0mfe2Ld4SJ6FPusTvyXuUB/1bmP+PsK4IU",
	"szEcLcB1aonVWElZyJPS3Mq+R+zXYWh+/8q+d7yMMDe5/nAJ9YUyTQMDSabAp5ElXZZupGjnF/wZcZBn",
	"qee5WxOtZtMTz9ZJxJoodCX2yfSl6xhT24ojS66/VEzPPg2V9XKRdBem/RucyEbzjno5eyGWvdvyCy/S",
	"MqXs9xU+BTe98LIE8MjsBYVvb01z/Ts9/VdUhvh+QzEFR3AMA77Dd/JgyR5C6RPvmaK0g1TxY+oqlbO4",
	"+1wuVUdZh06/jlUmXcV1OOD7UydBUXJZ+z8BAAD//6LPh8YiQAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
