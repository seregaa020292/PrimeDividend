// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение списка активов пользователя
	// (GET /asset/portfolio/{portfolioId}/user)
	GetUserAssets(w http.ResponseWriter, r *http.Request, portfolioId PortfolioId)
	// Создание актива пользователя
	// (POST /asset/portfolio/{portfolioId}/user)
	CreateUserAsset(w http.ResponseWriter, r *http.Request, portfolioId PortfolioId)
	// Удаление актива пользователя
	// (DELETE /asset/{assetId}/user)
	RemoveUserAsset(w http.ResponseWriter, r *http.Request, assetId AssetId)
	// Редактирование актива пользователя
	// (PATCH /asset/{assetId}/user)
	UpdateUserAsset(w http.ResponseWriter, r *http.Request, assetId AssetId)
	// Создание пользователя
	// (POST /auth/email)
	JoinEmail(w http.ResponseWriter, r *http.Request)
	// Подтверждение почты
	// (POST /auth/email/confirm)
	ConfirmEmail(w http.ResponseWriter, r *http.Request)
	// Аутентификация по Email
	// (POST /auth/email/login)
	LoginEmail(w http.ResponseWriter, r *http.Request)
	// Выход из аккаунта
	// (POST /auth/logout)
	Logout(w http.ResponseWriter, r *http.Request)
	// Обновить токены
	// (POST /auth/refresh-token)
	RefreshToken(w http.ResponseWriter, r *http.Request)
	// Аутентификация через соц. сети
	// (GET /auth/{network})
	JoinNetwork(w http.ResponseWriter, r *http.Request, network Network)
	// Авторизация через соц. сети
	// (GET /auth/{network}/callback)
	ConfirmNetwork(w http.ResponseWriter, r *http.Request, network Network, params ConfirmNetworkParams)
	// Получение всех валют
	// (GET /currency)
	GetCurrencies(w http.ResponseWriter, r *http.Request)
	// Получение валюты по ID
	// (GET /currency/{currencyId})
	GetCurrency(w http.ResponseWriter, r *http.Request, currencyId CurrencyId)
	// Получение инструментов
	// (GET /instrument)
	GetInstruments(w http.ResponseWriter, r *http.Request)
	// Получение инструмента по ID
	// (GET /instrument/{instrumentId})
	GetInstrument(w http.ResponseWriter, r *http.Request, instrumentId InstrumentId)
	// Получение списка ценных бумаг
	// (GET /market)
	GetMarkets(w http.ResponseWriter, r *http.Request, params GetMarketsParams)
	// Получение ценной бумаги по ID
	// (GET /market/{marketId})
	GetMarket(w http.ResponseWriter, r *http.Request, marketId MarketId)
	// Получение ценной бумаги по тикеру
	// (GET /market/{ticker})
	GetMarketByTicker(w http.ResponseWriter, r *http.Request, ticker Ticker)
	// Получение списка портфелей
	// (GET /portfolio)
	GetPortfolios(w http.ResponseWriter, r *http.Request, params GetPortfoliosParams)
	// Создание портфеля
	// (POST /portfolio)
	CreatePortfolio(w http.ResponseWriter, r *http.Request)
	// Получение списка портфелей пользователя
	// (GET /portfolio/user)
	GetUserPortfolios(w http.ResponseWriter, r *http.Request)
	// Удаление портфеля
	// (DELETE /portfolio/{portfolioId})
	RemovePortfolio(w http.ResponseWriter, r *http.Request, portfolioId PortfolioId)
	// Получение портфеля по ID
	// (GET /portfolio/{portfolioId})
	GetPortfolio(w http.ResponseWriter, r *http.Request, portfolioId PortfolioId)
	// Редактирование портфеля
	// (PATCH /portfolio/{portfolioId})
	UpdatePortfolio(w http.ResponseWriter, r *http.Request, portfolioId PortfolioId)
	// Получение поставщиков котировок
	// (GET /provider)
	GetProviders(w http.ResponseWriter, r *http.Request)
	// Получение поставщика котировок по ID
	// (GET /provider/{providerId})
	GetProvider(w http.ResponseWriter, r *http.Request, providerId ProviderId)
	// Удаление своей учетки
	// (DELETE /user)
	RemoveUser(w http.ResponseWriter, r *http.Request)
	// Получение данных пользователя
	// (GET /user)
	GetUser(w http.ResponseWriter, r *http.Request)
	// Редактирование своей учетки
	// (PATCH /user)
	UpdateUser(w http.ResponseWriter, r *http.Request)
	// Получение пользователя по ID
	// (GET /user/{userId})
	GetUserById(w http.ResponseWriter, r *http.Request, userId UserId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetUserAssets operation middleware
func (siw *ServerInterfaceWrapper) GetUserAssets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "portfolioId" -------------
	var portfolioId PortfolioId

	err = runtime.BindStyledParameter("simple", false, "portfolioId", chi.URLParam(r, "portfolioId"), &portfolioId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portfolioId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserAssets(w, r, portfolioId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateUserAsset operation middleware
func (siw *ServerInterfaceWrapper) CreateUserAsset(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "portfolioId" -------------
	var portfolioId PortfolioId

	err = runtime.BindStyledParameter("simple", false, "portfolioId", chi.URLParam(r, "portfolioId"), &portfolioId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portfolioId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUserAsset(w, r, portfolioId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RemoveUserAsset operation middleware
func (siw *ServerInterfaceWrapper) RemoveUserAsset(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assetId" -------------
	var assetId AssetId

	err = runtime.BindStyledParameter("simple", false, "assetId", chi.URLParam(r, "assetId"), &assetId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assetId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveUserAsset(w, r, assetId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateUserAsset operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserAsset(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "assetId" -------------
	var assetId AssetId

	err = runtime.BindStyledParameter("simple", false, "assetId", chi.URLParam(r, "assetId"), &assetId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assetId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUserAsset(w, r, assetId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// JoinEmail operation middleware
func (siw *ServerInterfaceWrapper) JoinEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.JoinEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ConfirmEmail operation middleware
func (siw *ServerInterfaceWrapper) ConfirmEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConfirmEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// LoginEmail operation middleware
func (siw *ServerInterfaceWrapper) LoginEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Logout(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefreshToken(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// JoinNetwork operation middleware
func (siw *ServerInterfaceWrapper) JoinNetwork(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "network" -------------
	var network Network

	err = runtime.BindStyledParameter("simple", false, "network", chi.URLParam(r, "network"), &network)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "network", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.JoinNetwork(w, r, network)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ConfirmNetwork operation middleware
func (siw *ServerInterfaceWrapper) ConfirmNetwork(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "network" -------------
	var network Network

	err = runtime.BindStyledParameter("simple", false, "network", chi.URLParam(r, "network"), &network)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "network", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ConfirmNetworkParams

	// ------------- Required query parameter "code" -------------
	if paramValue := r.URL.Query().Get("code"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "code"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Required query parameter "state" -------------
	if paramValue := r.URL.Query().Get("state"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "state"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConfirmNetwork(w, r, network, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetCurrencies operation middleware
func (siw *ServerInterfaceWrapper) GetCurrencies(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrencies(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetCurrency operation middleware
func (siw *ServerInterfaceWrapper) GetCurrency(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "currencyId" -------------
	var currencyId CurrencyId

	err = runtime.BindStyledParameter("simple", false, "currencyId", chi.URLParam(r, "currencyId"), &currencyId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "currencyId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrency(w, r, currencyId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetInstruments operation middleware
func (siw *ServerInterfaceWrapper) GetInstruments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInstruments(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetInstrument operation middleware
func (siw *ServerInterfaceWrapper) GetInstrument(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "instrumentId" -------------
	var instrumentId InstrumentId

	err = runtime.BindStyledParameter("simple", false, "instrumentId", chi.URLParam(r, "instrumentId"), &instrumentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "instrumentId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInstrument(w, r, instrumentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetMarkets operation middleware
func (siw *ServerInterfaceWrapper) GetMarkets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMarketsParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------
	if paramValue := r.URL.Query().Get("cursor"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMarkets(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetMarket operation middleware
func (siw *ServerInterfaceWrapper) GetMarket(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "marketId" -------------
	var marketId MarketId

	err = runtime.BindStyledParameter("simple", false, "marketId", chi.URLParam(r, "marketId"), &marketId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "marketId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMarket(w, r, marketId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetMarketByTicker operation middleware
func (siw *ServerInterfaceWrapper) GetMarketByTicker(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ticker" -------------
	var ticker Ticker

	err = runtime.BindStyledParameter("simple", false, "ticker", chi.URLParam(r, "ticker"), &ticker)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ticker", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMarketByTicker(w, r, ticker)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPortfolios operation middleware
func (siw *ServerInterfaceWrapper) GetPortfolios(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPortfoliosParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------
	if paramValue := r.URL.Query().Get("cursor"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPortfolios(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreatePortfolio operation middleware
func (siw *ServerInterfaceWrapper) CreatePortfolio(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortfolio(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUserPortfolios operation middleware
func (siw *ServerInterfaceWrapper) GetUserPortfolios(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserPortfolios(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RemovePortfolio operation middleware
func (siw *ServerInterfaceWrapper) RemovePortfolio(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "portfolioId" -------------
	var portfolioId PortfolioId

	err = runtime.BindStyledParameter("simple", false, "portfolioId", chi.URLParam(r, "portfolioId"), &portfolioId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portfolioId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemovePortfolio(w, r, portfolioId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPortfolio operation middleware
func (siw *ServerInterfaceWrapper) GetPortfolio(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "portfolioId" -------------
	var portfolioId PortfolioId

	err = runtime.BindStyledParameter("simple", false, "portfolioId", chi.URLParam(r, "portfolioId"), &portfolioId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portfolioId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPortfolio(w, r, portfolioId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdatePortfolio operation middleware
func (siw *ServerInterfaceWrapper) UpdatePortfolio(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "portfolioId" -------------
	var portfolioId PortfolioId

	err = runtime.BindStyledParameter("simple", false, "portfolioId", chi.URLParam(r, "portfolioId"), &portfolioId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portfolioId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePortfolio(w, r, portfolioId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProviders operation middleware
func (siw *ServerInterfaceWrapper) GetProviders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProviders(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProvider operation middleware
func (siw *ServerInterfaceWrapper) GetProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId ProviderId

	err = runtime.BindStyledParameter("simple", false, "providerId", chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProvider(w, r, providerId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RemoveUser operation middleware
func (siw *ServerInterfaceWrapper) RemoveUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "userId", chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserById(w, r, userId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/asset/portfolio/{portfolioId}/user", wrapper.GetUserAssets)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/asset/portfolio/{portfolioId}/user", wrapper.CreateUserAsset)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/asset/{assetId}/user", wrapper.RemoveUserAsset)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/asset/{assetId}/user", wrapper.UpdateUserAsset)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/email", wrapper.JoinEmail)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/email/confirm", wrapper.ConfirmEmail)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/email/login", wrapper.LoginEmail)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/logout", wrapper.Logout)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/refresh-token", wrapper.RefreshToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{network}", wrapper.JoinNetwork)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{network}/callback", wrapper.ConfirmNetwork)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/currency", wrapper.GetCurrencies)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/currency/{currencyId}", wrapper.GetCurrency)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/instrument", wrapper.GetInstruments)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/instrument/{instrumentId}", wrapper.GetInstrument)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/market", wrapper.GetMarkets)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/market/{marketId}", wrapper.GetMarket)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/market/{ticker}", wrapper.GetMarketByTicker)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/portfolio", wrapper.GetPortfolios)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/portfolio", wrapper.CreatePortfolio)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/portfolio/user", wrapper.GetUserPortfolios)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/portfolio/{portfolioId}", wrapper.RemovePortfolio)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/portfolio/{portfolioId}", wrapper.GetPortfolio)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/portfolio/{portfolioId}", wrapper.UpdatePortfolio)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/provider", wrapper.GetProviders)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/provider/{providerId}", wrapper.GetProvider)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user", wrapper.RemoveUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user", wrapper.GetUser)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/user", wrapper.UpdateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/{userId}", wrapper.GetUserById)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7Dn7jaTaYHvwvwAAAP//+aUcakFXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
