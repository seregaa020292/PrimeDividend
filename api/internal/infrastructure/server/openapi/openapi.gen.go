// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение списка активов пользователя
	// (GET /asset/user)
	GetUserAssets(w http.ResponseWriter, r *http.Request, params GetUserAssetsParams)
	// Создание пользователя
	// (POST /auth/email)
	JoinEmail(w http.ResponseWriter, r *http.Request)
	// Подтверждение почты
	// (POST /auth/email/confirm)
	ConfirmEmail(w http.ResponseWriter, r *http.Request)
	// Аутентификация по Email
	// (POST /auth/email/login)
	LoginEmail(w http.ResponseWriter, r *http.Request)
	// Выход из аккаунта
	// (POST /auth/logout)
	Logout(w http.ResponseWriter, r *http.Request)
	// Обновить токены
	// (POST /auth/refresh-token)
	RefreshToken(w http.ResponseWriter, r *http.Request)
	// Аутентификация через соц. сети
	// (GET /auth/{network})
	JoinNetwork(w http.ResponseWriter, r *http.Request, network Network)
	// Авторизация через соц. сети
	// (GET /auth/{network}/callback)
	ConfirmNetwork(w http.ResponseWriter, r *http.Request, network Network, params ConfirmNetworkParams)
	// Получение всех валют
	// (GET /currency)
	GetCurrencies(w http.ResponseWriter, r *http.Request)
	// Получение валюты по ID
	// (GET /currency/{currencyId})
	GetCurrency(w http.ResponseWriter, r *http.Request, currencyId CurrencyId)
	// Получение инструментов
	// (GET /instrument)
	GetInstruments(w http.ResponseWriter, r *http.Request)
	// Получение инструмента по ID
	// (GET /instrument/{instrumentId})
	GetInstrument(w http.ResponseWriter, r *http.Request, instrumentId InstrumentId)
	// Получение списка ценных бумаг
	// (GET /market)
	GetMarkets(w http.ResponseWriter, r *http.Request, params GetMarketsParams)
	// Получение ценной бумаги по ID
	// (GET /market/{marketId})
	GetMarket(w http.ResponseWriter, r *http.Request, marketId MarketId)
	// Получение ценной бумаги по тикеру
	// (GET /market/{ticker})
	GetMarketByTicker(w http.ResponseWriter, r *http.Request, ticker Ticker)
	// Получение списка портфелей
	// (GET /portfolio)
	GetPortfolios(w http.ResponseWriter, r *http.Request, params GetPortfoliosParams)
	// Создание портфеля
	// (POST /portfolio)
	CreatePortfolio(w http.ResponseWriter, r *http.Request)
	// Получение списка портфелей пользователя
	// (GET /portfolio/user)
	GetUserPortfolios(w http.ResponseWriter, r *http.Request)
	// Удаление портфеля
	// (DELETE /portfolio/{portfolioId})
	RemovePortfolio(w http.ResponseWriter, r *http.Request, portfolioId PortfolioId)
	// Получение портфеля по ID
	// (GET /portfolio/{portfolioId})
	GetPortfolio(w http.ResponseWriter, r *http.Request, portfolioId PortfolioId)
	// Редактирование портфеля
	// (PATCH /portfolio/{portfolioId})
	UpdatePortfolio(w http.ResponseWriter, r *http.Request, portfolioId PortfolioId)
	// Получение поставщиков котировок
	// (GET /provider)
	GetProviders(w http.ResponseWriter, r *http.Request)
	// Получение поставщика котировок по ID
	// (GET /provider/{providerId})
	GetProvider(w http.ResponseWriter, r *http.Request, providerId ProviderId)
	// Удаление своей учетки
	// (DELETE /user)
	RemoveUser(w http.ResponseWriter, r *http.Request)
	// Получение данных пользователя
	// (GET /user)
	GetUser(w http.ResponseWriter, r *http.Request)
	// Редактирование своей учетки
	// (PATCH /user)
	UpdateUser(w http.ResponseWriter, r *http.Request)
	// Получение пользователя по ID
	// (GET /user/{userId})
	GetUserById(w http.ResponseWriter, r *http.Request, userId UserId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetUserAssets operation middleware
func (siw *ServerInterfaceWrapper) GetUserAssets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserAssetsParams

	// ------------- Required query parameter "portfolioId" -------------
	if paramValue := r.URL.Query().Get("portfolioId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "portfolioId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "portfolioId", r.URL.Query(), &params.PortfolioId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portfolioId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserAssets(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// JoinEmail operation middleware
func (siw *ServerInterfaceWrapper) JoinEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.JoinEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ConfirmEmail operation middleware
func (siw *ServerInterfaceWrapper) ConfirmEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConfirmEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// LoginEmail operation middleware
func (siw *ServerInterfaceWrapper) LoginEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Logout(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefreshToken(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// JoinNetwork operation middleware
func (siw *ServerInterfaceWrapper) JoinNetwork(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "network" -------------
	var network Network

	err = runtime.BindStyledParameter("simple", false, "network", chi.URLParam(r, "network"), &network)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "network", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.JoinNetwork(w, r, network)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ConfirmNetwork operation middleware
func (siw *ServerInterfaceWrapper) ConfirmNetwork(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "network" -------------
	var network Network

	err = runtime.BindStyledParameter("simple", false, "network", chi.URLParam(r, "network"), &network)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "network", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ConfirmNetworkParams

	// ------------- Required query parameter "code" -------------
	if paramValue := r.URL.Query().Get("code"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "code"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Required query parameter "state" -------------
	if paramValue := r.URL.Query().Get("state"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "state"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConfirmNetwork(w, r, network, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetCurrencies operation middleware
func (siw *ServerInterfaceWrapper) GetCurrencies(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrencies(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetCurrency operation middleware
func (siw *ServerInterfaceWrapper) GetCurrency(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "currencyId" -------------
	var currencyId CurrencyId

	err = runtime.BindStyledParameter("simple", false, "currencyId", chi.URLParam(r, "currencyId"), &currencyId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "currencyId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrency(w, r, currencyId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetInstruments operation middleware
func (siw *ServerInterfaceWrapper) GetInstruments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInstruments(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetInstrument operation middleware
func (siw *ServerInterfaceWrapper) GetInstrument(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "instrumentId" -------------
	var instrumentId InstrumentId

	err = runtime.BindStyledParameter("simple", false, "instrumentId", chi.URLParam(r, "instrumentId"), &instrumentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "instrumentId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInstrument(w, r, instrumentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetMarkets operation middleware
func (siw *ServerInterfaceWrapper) GetMarkets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMarketsParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------
	if paramValue := r.URL.Query().Get("cursor"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMarkets(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetMarket operation middleware
func (siw *ServerInterfaceWrapper) GetMarket(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "marketId" -------------
	var marketId MarketId

	err = runtime.BindStyledParameter("simple", false, "marketId", chi.URLParam(r, "marketId"), &marketId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "marketId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMarket(w, r, marketId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetMarketByTicker operation middleware
func (siw *ServerInterfaceWrapper) GetMarketByTicker(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ticker" -------------
	var ticker Ticker

	err = runtime.BindStyledParameter("simple", false, "ticker", chi.URLParam(r, "ticker"), &ticker)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ticker", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMarketByTicker(w, r, ticker)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPortfolios operation middleware
func (siw *ServerInterfaceWrapper) GetPortfolios(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPortfoliosParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------
	if paramValue := r.URL.Query().Get("cursor"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPortfolios(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreatePortfolio operation middleware
func (siw *ServerInterfaceWrapper) CreatePortfolio(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortfolio(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUserPortfolios operation middleware
func (siw *ServerInterfaceWrapper) GetUserPortfolios(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserPortfolios(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RemovePortfolio operation middleware
func (siw *ServerInterfaceWrapper) RemovePortfolio(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "portfolioId" -------------
	var portfolioId PortfolioId

	err = runtime.BindStyledParameter("simple", false, "portfolioId", chi.URLParam(r, "portfolioId"), &portfolioId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portfolioId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemovePortfolio(w, r, portfolioId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPortfolio operation middleware
func (siw *ServerInterfaceWrapper) GetPortfolio(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "portfolioId" -------------
	var portfolioId PortfolioId

	err = runtime.BindStyledParameter("simple", false, "portfolioId", chi.URLParam(r, "portfolioId"), &portfolioId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portfolioId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPortfolio(w, r, portfolioId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdatePortfolio operation middleware
func (siw *ServerInterfaceWrapper) UpdatePortfolio(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "portfolioId" -------------
	var portfolioId PortfolioId

	err = runtime.BindStyledParameter("simple", false, "portfolioId", chi.URLParam(r, "portfolioId"), &portfolioId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portfolioId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePortfolio(w, r, portfolioId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProviders operation middleware
func (siw *ServerInterfaceWrapper) GetProviders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProviders(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProvider operation middleware
func (siw *ServerInterfaceWrapper) GetProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId ProviderId

	err = runtime.BindStyledParameter("simple", false, "providerId", chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProvider(w, r, providerId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RemoveUser operation middleware
func (siw *ServerInterfaceWrapper) RemoveUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "userId", chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserById(w, r, userId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/asset/user", wrapper.GetUserAssets)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/email", wrapper.JoinEmail)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/email/confirm", wrapper.ConfirmEmail)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/email/login", wrapper.LoginEmail)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/logout", wrapper.Logout)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/refresh-token", wrapper.RefreshToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{network}", wrapper.JoinNetwork)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{network}/callback", wrapper.ConfirmNetwork)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/currency", wrapper.GetCurrencies)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/currency/{currencyId}", wrapper.GetCurrency)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/instrument", wrapper.GetInstruments)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/instrument/{instrumentId}", wrapper.GetInstrument)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/market", wrapper.GetMarkets)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/market/{marketId}", wrapper.GetMarket)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/market/{ticker}", wrapper.GetMarketByTicker)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/portfolio", wrapper.GetPortfolios)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/portfolio", wrapper.CreatePortfolio)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/portfolio/user", wrapper.GetUserPortfolios)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/portfolio/{portfolioId}", wrapper.RemovePortfolio)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/portfolio/{portfolioId}", wrapper.GetPortfolio)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/portfolio/{portfolioId}", wrapper.UpdatePortfolio)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/provider", wrapper.GetProviders)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/provider/{providerId}", wrapper.GetProvider)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user", wrapper.RemoveUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user", wrapper.GetUser)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/user", wrapper.UpdateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/{userId}", wrapper.GetUserById)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
