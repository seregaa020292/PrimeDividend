// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Asset defines model for asset.
type Asset struct {
	Amount      int32              `json:"amount"`
	CreatedAt   time.Time          `json:"createdAt"`
	Id          openapi_types.UUID `json:"id"`
	MarketId    openapi_types.UUID `json:"marketId"`
	NotationAt  time.Time          `json:"notationAt"`
	PortfolioId openapi_types.UUID `json:"portfolioId"`
	Quantity    int32              `json:"quantity"`
	UpdatedAt   *time.Time         `json:"updatedAt,omitempty"`
}

// AssetAdd defines model for assetAdd.
type AssetAdd struct {
	Amount     int32              `json:"amount" validate:"min=1,required"`
	MarketId   openapi_types.UUID `json:"marketId" validate:"required,uuid"`
	NotationAt time.Time          `json:"notationAt" validate:"required"`
	Quantity   int32              `json:"quantity" validate:"min=1,required"`
}

// AssetUpdate defines model for assetUpdate.
type AssetUpdate struct {
	Amount     *int32     `json:"amount,omitempty" validate:"omitempty,required,min=1"`
	NotationAt *time.Time `json:"notationAt,omitempty" validate:"omitempty,required"`
	Quantity   *int32     `json:"quantity,omitempty" validate:"omitempty,required,min=1"`
}

// Assets defines model for assets.
type Assets = []Asset

// AuthConfirm defines model for authConfirm.
type AuthConfirm struct {
	Token openapi_types.UUID `json:"token" validate:"required"`
}

// AuthToken defines model for authToken.
type AuthToken struct {
	AccessToken string    `json:"accessToken"`
	ExpiresAt   time.Time `json:"expiresAt"`
}

// AuthUser defines model for authUser.
type AuthUser struct {
	Email    string `json:"email" validate:"required,email"`
	Name     string `json:"name"`
	Password string `json:"password" validate:"required,min=6"`
}

// Currencies defines model for currencies.
type Currencies = []Currency

// Currency defines model for currency.
type Currency struct {
	CreatedAt   time.Time          `json:"createdAt"`
	Description string             `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	Title       string             `json:"title"`
	UpdatedAt   *time.Time         `json:"updatedAt,omitempty"`
}

// Error defines model for error.
type Error struct {
	// Объект ошибки
	Error ErrorMessage `json:"error"`
}

// ErrorDetail defines model for errorDetail.
type ErrorDetail struct {
	// Поле в котором произошла ошибка
	Field string `json:"field"`

	// Описание ошибки
	Message string `json:"message"`
}

// Объект ошибки
type ErrorMessage struct {
	// В каком поле произошла ошибка
	Details []ErrorDetail `json:"details"`

	// Описание ошибки
	Message string `json:"message"`
}

// Instrument defines model for instrument.
type Instrument struct {
	CreatedAt   time.Time          `json:"createdAt"`
	Description string             `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	Title       string             `json:"title"`
	UpdatedAt   *time.Time         `json:"updatedAt,omitempty"`
}

// Instruments defines model for instruments.
type Instruments = []Instrument

// LoginUser defines model for loginUser.
type LoginUser struct {
	Email    string `json:"email" validate:"required,email"`
	Password string `json:"password" validate:"required,min=6"`
}

// Market defines model for market.
type Market struct {
	Content      *string            `json:"content,omitempty"`
	CreatedAt    time.Time          `json:"createdAt"`
	CurrencyId   openapi_types.UUID `json:"currencyId"`
	Id           openapi_types.UUID `json:"id"`
	ImageUrl     *string            `json:"imageUrl,omitempty"`
	InstrumentId openapi_types.UUID `json:"instrumentId"`
	Ticker       string             `json:"ticker"`
	Title        string             `json:"title"`
	UpdatedAt    *time.Time         `json:"updatedAt,omitempty"`
}

// Markets defines model for markets.
type Markets = []Market

// Метаданные
type Meta struct {
	Pagination interface{} `json:"pagination"`
}

// Данные пагинации
type PagingCursor struct {
	// Кол-во элементов
	Count int `json:"count"`

	// Курсор для следующей страницы
	CursorNext *string `json:"cursorNext"`

	// Курсор для предыдущей страницы
	CursorPrev *string `json:"cursorPrev"`

	// Кол-во элементов на странице
	Limit int `json:"limit"`
}

// Данные пагинации
type PagingOffset struct {
	// Кол-во элементов на странице
	Limit int `json:"limit"`

	// Текущая страница
	Page int `json:"page"`

	// Всего элементов
	Total int `json:"total"`
}

// Portfolio defines model for portfolio.
type Portfolio struct {
	CreatedAt  time.Time          `json:"createdAt"`
	CurrencyId openapi_types.UUID `json:"currencyId"`
	Id         openapi_types.UUID `json:"id"`
	Title      string             `json:"title"`
	UpdatedAt  *time.Time         `json:"updatedAt,omitempty"`
	UserId     openapi_types.UUID `json:"userId"`
}

// PortfolioAdd defines model for portfolioAdd.
type PortfolioAdd struct {
	CurrencyId openapi_types.UUID `json:"currencyId" validate:"required,uuid"`
	Title      string             `json:"title" validate:"required"`
}

// PortfolioUpdate defines model for portfolioUpdate.
type PortfolioUpdate struct {
	Active     *bool               `json:"active,omitempty"`
	CurrencyId *openapi_types.UUID `json:"currencyId,omitempty" validate:"omitempty,required,uuid"`
	Title      *string             `json:"title,omitempty" validate:"omitempty,required"`
}

// Portfolios defines model for portfolios.
type Portfolios = []Portfolio

// Provider defines model for provider.
type Provider struct {
	CreatedAt   time.Time          `json:"createdAt"`
	Description *string            `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	Title       string             `json:"title"`
	UpdatedAt   *time.Time         `json:"updatedAt,omitempty"`
}

// Providers defines model for providers.
type Providers = []Provider

// User defines model for user.
type User struct {
	Avatar    *string            `json:"avatar,omitempty"`
	CreatedAt time.Time          `json:"createdAt"`
	Email     string             `json:"email"`
	Id        openapi_types.UUID `json:"id"`
	Name      string             `json:"name"`
	Role      string             `json:"role"`
	Status    string             `json:"status"`
	UpdatedAt *time.Time         `json:"updatedAt,omitempty"`
}

// UserUpdate defines model for userUpdate.
type UserUpdate struct {
	Email *string `json:"email,omitempty" validate:"omitempty,required,email"`
	Name  *string `json:"name,omitempty" validate:"omitempty,required"`
}

// AssetId defines model for assetId.
type AssetId = openapi_types.UUID

// Code defines model for code.
type Code = string

// CurrencyId defines model for currencyId.
type CurrencyId = openapi_types.UUID

// Cursor defines model for cursor.
type Cursor = string

// InstrumentId defines model for instrumentId.
type InstrumentId = openapi_types.UUID

// Limit defines model for limit.
type Limit = int

// MarketId defines model for marketId.
type MarketId = openapi_types.UUID

// Network defines model for network.
type Network = string

// PortfolioId defines model for portfolioId.
type PortfolioId = openapi_types.UUID

// ProviderId defines model for providerId.
type ProviderId = openapi_types.UUID

// State defines model for state.
type State = string

// Ticker defines model for ticker.
type Ticker = string

// UserId defines model for userId.
type UserId = openapi_types.UUID

// N400 defines model for 400.
type N400 = Error

// N403 defines model for 403.
type N403 = Error

// N500 defines model for 500.
type N500 = Error

// CreateUserAssetJSONBody defines parameters for CreateUserAsset.
type CreateUserAssetJSONBody = AssetAdd

// UpdateUserAssetJSONBody defines parameters for UpdateUserAsset.
type UpdateUserAssetJSONBody = AssetUpdate

// JoinEmailJSONBody defines parameters for JoinEmail.
type JoinEmailJSONBody = AuthUser

// ConfirmEmailJSONBody defines parameters for ConfirmEmail.
type ConfirmEmailJSONBody = AuthConfirm

// LoginEmailJSONBody defines parameters for LoginEmail.
type LoginEmailJSONBody = LoginUser

// ConfirmNetworkParams defines parameters for ConfirmNetwork.
type ConfirmNetworkParams struct {
	Code  Code  `form:"code" json:"code"`
	State State `form:"state" json:"state"`
}

// GetMarketsParams defines parameters for GetMarkets.
type GetMarketsParams struct {
	// Размер списка
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Курсор страницы
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetPortfoliosParams defines parameters for GetPortfolios.
type GetPortfoliosParams struct {
	// Размер списка
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Курсор страницы
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// CreatePortfolioJSONBody defines parameters for CreatePortfolio.
type CreatePortfolioJSONBody = PortfolioAdd

// UpdatePortfolioJSONBody defines parameters for UpdatePortfolio.
type UpdatePortfolioJSONBody = PortfolioUpdate

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody = UserUpdate

// CreateUserAssetJSONRequestBody defines body for CreateUserAsset for application/json ContentType.
type CreateUserAssetJSONRequestBody = CreateUserAssetJSONBody

// UpdateUserAssetJSONRequestBody defines body for UpdateUserAsset for application/json ContentType.
type UpdateUserAssetJSONRequestBody = UpdateUserAssetJSONBody

// JoinEmailJSONRequestBody defines body for JoinEmail for application/json ContentType.
type JoinEmailJSONRequestBody = JoinEmailJSONBody

// ConfirmEmailJSONRequestBody defines body for ConfirmEmail for application/json ContentType.
type ConfirmEmailJSONRequestBody = ConfirmEmailJSONBody

// LoginEmailJSONRequestBody defines body for LoginEmail for application/json ContentType.
type LoginEmailJSONRequestBody = LoginEmailJSONBody

// CreatePortfolioJSONRequestBody defines body for CreatePortfolio for application/json ContentType.
type CreatePortfolioJSONRequestBody = CreatePortfolioJSONBody

// UpdatePortfolioJSONRequestBody defines body for UpdatePortfolio for application/json ContentType.
type UpdatePortfolioJSONRequestBody = UpdatePortfolioJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserJSONBody
