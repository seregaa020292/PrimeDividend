// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"primedivident/internal/config"
	"primedivident/internal/handlers"
	"primedivident/internal/infrastructure/server"
	"primedivident/internal/infrastructure/server/response"
	"primedivident/internal/infrastructure/server/routes"
	"primedivident/internal/infrastructure/socket"
	"primedivident/internal/infrastructure/wire/wire_group"
	"primedivident/internal/modules/auth/command"
	repository2 "primedivident/internal/modules/auth/repository"
	"primedivident/internal/modules/auth/service/email"
	"primedivident/internal/modules/auth/service/strategy"
	"primedivident/internal/modules/auth/service/strategy/repository"
	"primedivident/internal/modules/currency/query"
	repository3 "primedivident/internal/modules/currency/repository"
	query2 "primedivident/internal/modules/instrument/query"
	repository4 "primedivident/internal/modules/instrument/repository"
	query3 "primedivident/internal/modules/market/query"
	repository5 "primedivident/internal/modules/market/repository"
	command2 "primedivident/internal/modules/portfolio/command"
	query4 "primedivident/internal/modules/portfolio/query"
	repository6 "primedivident/internal/modules/portfolio/repository"
	query5 "primedivident/internal/modules/provider/query"
	repository7 "primedivident/internal/modules/provider/repository"
	query6 "primedivident/internal/modules/user/query"
	repository8 "primedivident/internal/modules/user/repository"
	"primedivident/internal/ports/http/asset"
	"primedivident/internal/ports/http/auth"
	currency2 "primedivident/internal/ports/http/currency"
	instrument2 "primedivident/internal/ports/http/instrument"
	market2 "primedivident/internal/ports/http/market"
	portfolio2 "primedivident/internal/ports/http/portfolio"
	provider2 "primedivident/internal/ports/http/provider"
	"primedivident/internal/ports/http/register"
	user2 "primedivident/internal/ports/http/user"
	market3 "primedivident/internal/ports/ws/market"
	"primedivident/internal/presenters/currency"
	"primedivident/internal/presenters/instrument"
	"primedivident/internal/presenters/market"
	"primedivident/internal/presenters/portfolio"
	"primedivident/internal/presenters/provider"
	"primedivident/internal/presenters/user"
	"primedivident/pkg/validator"
)

// Injectors from wire.go:

func Initialize(cfg config.Config) server.Server {
	jwtTokens := ProvideJwtTokens(cfg)
	postgres := ProvidePostgres(cfg)
	repositoryRepository := repository.NewRepository(postgres)
	service := strategy.NewService(jwtTokens, repositoryRepository)
	strategyStrategy := wire_group.ProvideStrategy(cfg, service)
	logger := ProvideLogger(cfg)
	validatorValidator := validator.GetValidator()
	responder := response.NewRespond(logger, validatorValidator)
	repository9 := repository2.NewRepository(postgres)
	sender := ProvideMailerObserver(cfg, logger)
	templater := ProvideTemplate(cfg)
	joinConfirmUser := email.NewJoinConfirmUser(sender, templater)
	joinByEmail := command.NewJoinByEmail(repository9, joinConfirmUser)
	confirmUser := email.NewConfirmUser(sender, templater)
	confirmByToken := command.NewConfirmByToken(repository9, confirmUser)
	handlerAuth := auth.NewHandler(responder, strategyStrategy, joinByEmail, confirmByToken)
	handlerAsset := asset.NewHandler()
	presenter := currency.NewPresenter()
	repository10 := repository3.NewRepository(postgres)
	getById := query.NewGetById(repository10)
	getAll := query.NewGetAll(repository10)
	handlerCurrency := currency2.NewHandler(responder, presenter, getById, getAll)
	instrumentPresenter := instrument.NewPresenter()
	repository11 := repository4.NewRepository(postgres)
	queryGetById := query2.NewGetById(repository11)
	queryGetAll := query2.NewGetAll(repository11)
	handlerInstrument := instrument2.NewHandler(responder, instrumentPresenter, queryGetById, queryGetAll)
	marketPresenter := market.NewPresenter()
	repository12 := repository5.NewRepository(postgres)
	getById2 := query3.NewGetById(repository12)
	getByTicker := query3.NewGetByTicker(repository12)
	getAll2 := query3.NewGetAll(repository12)
	handlerMarket := market2.NewHandler(responder, marketPresenter, getById2, getByTicker, getAll2)
	portfolioPresenter := portfolio.NewPresenter()
	repository13 := repository6.NewRepository(postgres)
	getById3 := query4.NewGetById(repository13)
	getAll3 := query4.NewGetAll(repository13)
	create := command2.NewCreate(repository13)
	edit := command2.NewEdit(repository13)
	remove := command2.NewRemove(repository13)
	handlerPortfolio := portfolio2.NewHandler(responder, portfolioPresenter, getById3, getAll3, create, edit, remove)
	providerPresenter := provider.NewPresenter()
	repository14 := repository7.NewRepository(postgres)
	getById4 := query5.NewGetById(repository14)
	getAll4 := query5.NewGetAll(repository14)
	handlerProvider := provider2.NewHandler(responder, providerPresenter, getById4, getAll4)
	handlerRegister := register.NewHandler()
	userPresenter := user.NewPresenter()
	repository15 := repository8.NewRepository(postgres)
	getById5 := query6.NewGetById(repository15)
	handlerUser := user2.NewHandler(responder, userPresenter, getById5)
	httpHandlers := handlers.NewHttpHandlers(handlerAuth, handlerAsset, handlerCurrency, handlerInstrument, handlerMarket, handlerPortfolio, handlerProvider, handlerRegister, handlerUser)
	upgrader := socket.NewUpgrader()
	quotes := wire_group.ProvideQuotes(cfg)
	marketHandlerMarket := market3.NewHandlerMarket(responder, upgrader, quotes)
	wsHandlers := handlers.NewWsHandlers(marketHandlerMarket)
	routesRoutes := routes.NewRoutes(strategyStrategy, httpHandlers, wsHandlers)
	serverServer := server.NewServer(routesRoutes)
	return serverServer
}
