// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"primedivident/internal/config"
	"primedivident/internal/infrastructure/http"
	"primedivident/internal/infrastructure/http/handlers"
	"primedivident/internal/modules/instrument/interactor/query"
	"primedivident/internal/modules/instrument/repository"
	"primedivident/internal/modules/portfolio/interactor/command"
	query2 "primedivident/internal/modules/portfolio/interactor/query"
	repository2 "primedivident/internal/modules/portfolio/repository"
	"primedivident/internal/ports/http/asset"
	"primedivident/internal/ports/http/currency"
	"primedivident/internal/ports/http/instrument"
	"primedivident/internal/ports/http/market"
	"primedivident/internal/ports/http/portfolio"
	"primedivident/internal/ports/http/provider"
	"primedivident/internal/ports/http/register"
	"primedivident/internal/ports/http/user"
	"primedivident/internal/services/email"
	"primedivident/pkg/validator"
)

// Injectors from wire.go:

func Initialize(cfg config.Config) http.Server {
	handlerAsset := asset.NewHandler()
	handlerCurrency := currency.NewHandler()
	postgres := ProvidePostgres(cfg)
	repositoryRepository := repository.NewRepository(postgres)
	instrumentAll := query.NewInstrumentAll(repositoryRepository)
	handlerInstrument := instrument.NewHandler(instrumentAll)
	handlerMarket := market.NewHandler()
	validatorValidator := validator.GetValidator()
	repository3 := repository2.NewRepository(postgres)
	portfolioById := query2.NewPortfolioById(repository3)
	logger := ProvideLogger(cfg)
	sender := ProvideMailerObserver(cfg, logger)
	firstTestSend := email.NewFirstTestSend(cfg, sender)
	portfolioCreate := command.NewPortfolioCreate(firstTestSend, repository3)
	handlerPortfolio := portfolio.NewHandler(validatorValidator, portfolioById, portfolioCreate)
	handlerProvider := provider.NewHandler()
	handlerRegister := register.NewHandler()
	handlerUser := user.NewHandler()
	httpHandlers := handlers.NewHandlers(handlerAsset, handlerCurrency, handlerInstrument, handlerMarket, handlerPortfolio, handlerProvider, handlerRegister, handlerUser)
	server := http.NewServer(httpHandlers)
	return server
}
